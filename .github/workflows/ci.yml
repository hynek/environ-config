---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  dists-artifact-name: python-package-distributions
  sdist-artifact-name-wildcard: environ_config-*.tar.gz

  FORCE_COLOR: "1" # Make tools pretty.
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  SETUPTOOLS_SCM_PRETEND_VERSION: "1.0" # avoid warnings about shallow checkout
  PYTHON_LATEST: "3.11"

permissions:
  contents: read

jobs:
  build-sdist:
    name: ðŸ“¦ Build the source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Grab the src from GH
        uses: actions/checkout@v3

      - name: Install `pypa/build` PEP 517 front-end
        run: python -m pip install build

      - name: ðŸ“¦ Build an sdist
        run: python -m build --sdist

      - name: Verify that the artifact with expected name got created
        run: >-
          ls -1
          dist/${{ env.sdist-artifact-name-wildcard }}

      - name: Store the distribution package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.dists-artifact-name }}
          # NOTE: Exact expected file names are specified here
          # NOTE: as a safety measure â€” if anything weird ends
          # NOTE: up being in this dir or not all dists will be
          # NOTE: produced, this will fail the workflow.
          path: |
            dist/${{ env.sdist-artifact-name-wildcard }}
          retention-days: 15

  tests:
    name: Tests on ${{ matrix.python-version }}
    needs:
      - build-sdist

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "~3.12.0-0"
    continue-on-error: >-
      ${{ contains(matrix.python-version, '~') && true || false }}

    steps:
      - name: Retrieve the project source from an sdist inside the GHA artifact
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-artifact-name-wildcard }}
          workflow-artifact-name: ${{ env.dists-artifact-name }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade wheel nox

      - name: Determine Python version for Nox
        run: |
          V=${{ matrix.python-version }}
          if [[ "$V" = ~* ]]; then
            # Extract version from a '~3.XX.0-0' specifier.
            V=${V:1:4}
          fi

          echo NOX_PYTHON=$V >>$GITHUB_ENV

      - run: python -Im nox --python ${{ env.NOX_PYTHON }} --tags tests

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: Combine & check coverage
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Retrieve the project source from an sdist inside the GHA artifact
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-artifact-name-wildcard }}
          workflow-artifact-name: ${{ env.dists-artifact-name }}
      - uses: actions/setup-python@v4
        with:
          # Use latest Python, so it understands all syntax.
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -m pip install --upgrade coverage[toml]

      - uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -m coverage combine
          python -m coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -m coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          python -m coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  mypy:
    name: mypy on ${{ matrix.python-version }}
    needs:
      - build-sdist

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"

    steps:
      - name: Retrieve the project source from an sdist inside the GHA artifact
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-artifact-name-wildcard }}
          workflow-artifact-name: ${{ env.dists-artifact-name }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -m pip install --upgrade wheel nox

      - run: python -Im nox -e mypy
  docs:
    name: Build docs & run doctests
    needs:
      - build-sdist

    runs-on: ubuntu-latest
    steps:
      - name: Retrieve the project source from an sdist inside the GHA artifact
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-artifact-name-wildcard }}
          workflow-artifact-name: ${{ env.dists-artifact-name }}
      - uses: actions/setup-python@v4
        with:
          # Keep in sync with noxfile.py/docs & .readthedocs.yaml
          python-version: "3.10"
      - run: python -m pip install --upgrade wheel nox

      - run: python -Im nox -e docs

  install-dev:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    name: Verify dev env on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - run: python -m pip install -e .[dev]
      - run: python -c 'import environ; print(environ.__version__)'

  # Ensure everything required is passing for branch protection.
  required-checks-pass:
    if: always()

    needs:
      - coverage
      - docs
      - install-dev
      - mypy

    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: block

      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
